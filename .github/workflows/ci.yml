name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # backend:
  #   runs-on: ubuntu-latest
  #   name: Backend Tests
    
  #   services:
  #     postgres:
  #       image: postgres:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: servix_db
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5433:5432

  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '18'
    
  #   - name: Cache backend dependencies
  #     uses: actions/cache@v4
  #     with:
  #       path: backend/node_modules
  #       key: ${{ runner.os }}-backend-node-${{ hashFiles('backend/package-lock.json') }}
  #       restore-keys: |
  #         ${{ runner.os }}-backend-node-
    
  #   - name: Install backend dependencies
  #     run: |
  #       cd backend
  #       npm ci
    
  #   - name: Setup Prisma
  #     run: |
  #       cd backend
  #       npx prisma generate
    
  #   - name: Test database migrations
  #     run: |
  #       cd backend
  #       npx prisma migrate deploy
  #     env:
  #       DATABASE_URL: postgresql://postgres:postgres@localhost:5433/servix_db
    
  #   - name: Run backend API structure tests
  #     run: |
  #       cd backend
  #       npm run test:ci
  #     env:
  #       DATABASE_URL: postgresql://postgres:postgres@localhost:5433/servix_db
    
  #   # Security audit - only fails on critical vulnerabilities
  #   # Non-critical vulnerabilities in dev dependencies are expected and don't affect production
  #   - name: Run backend security audit
  #     run: |
  #       cd backend
  #       npm audit --audit-level=critical || echo "Backend security audit completed - non-critical vulnerabilities found"

  # frontend:
  #   runs-on: ubuntu-latest
  #   name: Frontend Tests

  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '18'
    
  #   - name: Cache frontend dependencies
  #     uses: actions/cache@v4
  #     with:
  #       path: frontend/node_modules
  #       key: ${{ runner.os }}-frontend-node-${{ hashFiles('frontend/package-lock.json') }}
  #       restore-keys: |
  #         ${{ runner.os }}-frontend-node-
    
  #   - name: Install frontend dependencies
  #     run: |
  #       cd frontend
  #       npm install --legacy-peer-deps
    
  #   # TODO: Fix frontend linting - ESLint configuration needs to be updated for Angular 14
  #   # - name: Run frontend linting
  #   #   run: |
  #   #     cd frontend
  #   #     npm run lint
    
  #   - name: Run frontend tests
  #     run: |
  #       cd frontend
  #       npm test -- --watch=false --browsers=ChromeHeadless
    
  #   # Security audit - only fails on critical vulnerabilities
  #   # Non-critical vulnerabilities in dev dependencies are expected and don't affect production
  #   - name: Run frontend security audit
  #     run: |
  #       cd frontend
  #       npm audit --audit-level=critical || echo "Frontend security audit completed - non-critical vulnerabilities found"
    
  #   - name: Security audit summary
  #     run: |
  #       echo "=== Security Audit Summary ==="
  #       echo "Running full security audit for information only..."
  #       echo "Backend vulnerabilities:"
  #       cd backend && npm audit --audit-level=moderate || echo "  Audit completed with findings"
  #       echo "Frontend vulnerabilities:"
  #       cd ../frontend && npm audit --audit-level=moderate || echo "  Audit completed with findings"
  #       echo "Note: Non-critical vulnerabilities are expected in development dependencies"
  #       echo "These vulnerabilities are in dev dependencies and don't affect production builds"
    
  #   - name: Build frontend
  #     run: |
  #       cd frontend
  #       npm run build --prod

  e2e:
    runs-on: ubuntu-latest
    name: E2E Tests
    # needs: [frontend]

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install --legacy-peer-deps

    - name: Download ChromeDriver 138 for Testing
      run: |
        wget -O chromedriver-linux64.zip https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.168/linux64/chromedriver-linux64.zip
        unzip -o chromedriver-linux64.zip
        sudo mv -f chromedriver-linux64/chromedriver /usr/bin/chromedriver
        sudo chmod +x /usr/bin/chromedriver
        echo "ChromeDriver version:"
        chromedriver --version
        echo "ChromeDriver location:"
        which chromedriver
        
        # Clean up webdriver-manager's ChromeDriver to prevent conflicts
        echo "Cleaning up webdriver-manager ChromeDriver..."
        rm -rf node_modules/webdriver-manager/selenium/chromedriver* || true
        echo "Webdriver-manager ChromeDriver cleaned up"

    - name: Install Chrome and ChromeDriver (dynamic version matching)
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip wget curl xvfb

        # Use system-installed Chrome and ChromeDriver for better compatibility
        # Install Chrome from Google's repository
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Verify Chrome version
        CHROME_VERSION=$(google-chrome --version)
        echo "Installed Chrome version: $CHROME_VERSION"
        
        # Use system-installed ChromeDriver
        echo "Using system ChromeDriver at /usr/bin/chromedriver"
        
        # Verify ChromeDriver version
        CHROMEDRIVER_VERSION_ACTUAL=$(chromedriver --version)
        echo "Installed ChromeDriver version: $CHROMEDRIVER_VERSION_ACTUAL"
    
    - name: Start Angular dev server and run E2E tests
      run: |
        cd frontend
        
        # Kill any existing Chrome processes and clean up
        pkill -f chrome || true
        pkill -f chromedriver || true
        pkill -f google-chrome || true
        pkill -f chromium || true
        
        # Force kill any remaining processes
        pkill -9 -f chrome || true
        pkill -9 -f chromedriver || true
        pkill -9 -f google-chrome || true
        pkill -9 -f chromium || true
        
        # Clean up any existing user data directories and Chrome cache
        rm -rf /tmp/chrome-user-data-dir* || true
        rm -rf /tmp/.com.google.Chrome* || true
        rm -rf /tmp/.org.chromium.Chromium* || true
        rm -rf ~/.config/google-chrome || true
        rm -rf ~/.cache/google-chrome || true
        rm -rf /tmp/.org.chromium.Chromium* || true
        rm -rf /tmp/.com.google.Chrome* || true
        rm -rf /tmp/chrome_* || true
        rm -rf /tmp/chromium_* || true
        
        # Clean up any Chrome temporary files
        find /tmp -name "*chrome*" -type d -exec rm -rf {} + 2>/dev/null || true
        find /tmp -name "*chromium*" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Additional cleanup based on Selenium GitHub issue #15327
        rm -rf /tmp/.org.chromium.Chromium* || true
        rm -rf /tmp/.com.google.Chrome* || true
        rm -rf /tmp/chrome_* || true
        rm -rf /tmp/chromium_* || true
        rm -rf /tmp/selenium_* || true
        
        # Kill any remaining Chrome processes with different signals
        pkill -TERM -f chrome || true
        pkill -TERM -f chromedriver || true
        pkill -TERM -f google-chrome || true
        pkill -TERM -f chromium || true
        
        # Wait a moment for processes to fully terminate
        sleep 5
        
        # Verify we're using the correct ChromeDriver version
        echo "=== ChromeDriver Verification ==="
        chromedriver --version
        echo "ChromeDriver path: $(which chromedriver)"
        echo "================================"
        
        # Start Angular dev server in background
        npx ng serve --port 4201 --host 0.0.0.0 &
        
        # Wait for Angular dev server to be ready
        echo "Waiting for Angular dev server to start..."
        sleep 10
        
        # Check if the server is responding
        for i in {1..30}; do
          if curl -s http://localhost:4201 > /dev/null; then
            echo "Angular dev server is ready!"
            break
          fi
          echo "Waiting for server... (attempt $i/30)"
          sleep 2
        done
        
        # Run E2E tests with xvfb-run to ensure proper display handling
        # Explicitly set ChromeDriver path to use our downloaded version
        export CHROMEDRIVER_PATH=/usr/bin/chromedriver
        xvfb-run --server-args="-screen 0 1920x1080x24" npx ng e2e --port 4201
      env:
        CI: true
        CHROME_BIN: /usr/bin/google-chrome
        CHROMEDRIVER_PATH: /usr/bin/chromedriver

  # build:
  #   needs: [backend, frontend]
  #   runs-on: ubuntu-latest
  #   name: Build Project
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '18'
    
  #   - name: Install backend dependencies
  #     run: |
  #       cd backend
  #       npm ci
    
  #   - name: Install frontend dependencies
  #     run: |
  #       cd frontend
  #       npm install
    
  #   - name: Build backend
  #     run: |
  #       cd backend
  #       npx prisma generate
  #       npm run build || echo "No build script found, skipping"
    
  #   - name: Build frontend
  #     run: |
  #       cd frontend
  #       npm run build --prod
    
  #   - name: Upload build artifacts
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: build-artifacts
  #       path: |
  #         backend/dist/
  #         frontend/dist/
  #       retention-days: 7 